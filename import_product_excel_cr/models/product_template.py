import datetime
import itertools
import json
import logging

from odoo import api, fields, models, tools, _, SUPERUSER_ID
from odoo.exceptions import ValidationError, RedirectWarning, UserError

_logger = logging.getLogger(__name__)

# class ProductTemplateAttributeValue(models.Model):
#     """Materialized relationship between attribute values
#     and product template generated by the product.template.attribute.line"""
#
#     _inherit = "product.template.attribute.value"
#     _order = 'id'
#
# class ProductProduct(models.Model):
#     _inherit = "product.product"
#     _order = 'id'


class ProductUnspscCode(models.Model):
    _inherit = "product.unspsc.code"

    comp_name = fields.Char("Import Name", compute="_set_comp_name", store=True)

    @api.depends("name","code")
    def _set_comp_name(self):
        for rec in self:
            if rec.name and rec.code:
                rec.comp_name = rec.code+"-"+rec.name


class ProductTemplate(models.Model):
    _inherit = "product.template"
    _order = "id"

    size_attribute_value_id = fields.Many2one("product.attribute.value", string="Size Value")
    color_attribute_value_id = fields.Many2one("product.attribute.value", string="Color Value")

    # def name_get(self):
    #     # Prefetch the fields used by the `name_get`, so `browse` doesn't fetch other fields
    #     self.browse(self.ids).read(['name', 'default_code','size_attribute_value_id','color_attribute_value_id'])
    #     return [(template.id,
    #              '%s%s%s' % (template.default_code and '[%s] ' % template.default_code or '', template.name, template.size_attribute_value_id and template.color_attribute_value_id and '(%s,%s) ' % (template.size_attribute_value_id.display_name,template.color_attribute_value_id.display_name) or ''))
    #             for template in self]

    def update_product_name_tracking(self):
        for rec in self:
            if rec.size_attribute_value_id and rec.color_attribute_value_id:
                name = rec.name
                rec.write({'name': name+'(Tama√±o:'+rec.size_attribute_value_id.name+',Color:'+rec.color_attribute_value_id.name+')','tracking':'none'})


    def update_attribute_values(self):
        for rec in self:
            if rec.size_attribute_value_id and rec.color_attribute_value_id and rec.attribute_line_ids:
                for line in rec.attribute_line_ids:
                    if not line.value_ids:
                        if line.attribute_id.name == 'Size':
                            line.value_ids = rec.size_attribute_value_id.ids
                        elif line.attribute_id.name == 'Color':
                            line.value_ids = rec.color_attribute_value_id.ids
        return True



    def product_create_sql_xmlrpc(self, vals={}):
        if vals:
            tmpl_query = """
                    INSERT INTO "product_template" ("id", "active", "allow_out_of_stock_order", "available_in_pos", 
                    "available_threshold", "base_unit_count", "categ_id", "color_attribute_value_id", "create_date", 
                    "create_uid", "default_code", "detailed_type", "expense_policy", "invoice_policy", "is_published", 
                    "list_price", "name", "priority", "purchase_line_warn", "purchase_method", "purchase_ok", 
                    "purchase_requisition", "sale_delay", "sale_line_warn", "sale_ok", "sequence", "service_type", 
                    "show_availability", "size_attribute_value_id", "tracking", "type", "unspsc_code_id", "uom_id", 
                    "uom_po_id", "website_sequence", "website_size_x", "website_size_y", "write_date", "write_uid") 
                    VALUES (nextval(%s), %s, %s, %s, 
                            %s, %s, %s, %s, %s, 
                            %s, %s, %s, %s, %s, %s, 
                            %s, %s, %s, %s, %s, %s, 
                            %s, %s, %s, %s, %s, %s, 
                            %s, %s, %s, %s, %s, %s, 
                            %s, %s, %s, %s, %s, %s) RETURNING id;
                    """
            tmpl_params = ['product_template_id_seq', True, False, True,
                        5.0, 0.0, 1, vals["color_attribute_value_id"], datetime.datetime.now(),
                        2, vals['default_code'], 'product', 'no', 'order', True,
                      vals['list_price'], vals['name'],'0', 'no-message', 'purchase', True,
                      'rfq', 0.0, 'no-message', True, 1, 'manual',
                           False, vals['size_attribute_value_id'], 'lot', 'product', vals['unspsc_code_id'], 1,
                      1, 1, 1, 1, datetime.datetime.now(), 2]
            self.env.cr.execute(tmpl_query, tmpl_params)
            tmpl_id = self.env.cr.dictfetchall()
            print("--------tmpl_id------------",tmpl_id)

            supp_query = """
                    INSERT INTO "product_supplierinfo" ("id", "company_id", "create_date", "create_uid", "currency_id", 
                    "delay", "min_qty", "name", "price", "product_tmpl_id", "sequence", "write_date", "write_uid") 
                    VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
                    """
            supp_params = ['product_supplierinfo_id_seq', 1, datetime.datetime.now(), 2, 33, 1, '1.00', vals['vendor_partner_id'], '0.00', tmpl_id[0]['id'], 1, datetime.datetime.now(), 2]
            self.env.cr.execute(supp_query, supp_params)
            supp_id = self.env.cr.dictfetchall()
            # print("--------supp_id------------", supp_id)

            size_query = """
                    INSERT INTO "product_template_attribute_line" ("id", "active", "attribute_id", "create_date", "create_uid", 
                    "product_tmpl_id", "write_date", "write_uid") VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s) RETURNING id
                    """
            size_params = ['product_template_attribute_line_id_seq', True, vals['size_id'], datetime.datetime.now(), 2, tmpl_id[0]['id'], datetime.datetime.now(), 2]
            self.env.cr.execute(size_query, size_params)
            size_att_line_id = self.env.cr.dictfetchall()
            # print("--------size_att_line_id------------", size_att_line_id)

            color_query = """
                        INSERT INTO "product_template_attribute_line" ("id", "active", "attribute_id", "create_date", "create_uid", 
                        "product_tmpl_id", "write_date", "write_uid") VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s) RETURNING id
                        """
            color_params = ['product_template_attribute_line_id_seq', True, vals['color_id'], datetime.datetime.now(), 2,
                           tmpl_id[0]['id'], datetime.datetime.now(), 2]
            self.env.cr.execute(color_query, color_params)
            color_att_line_id = self.env.cr.dictfetchall()
            # print("--------color_att_line_id------------", color_att_line_id)

            size_value_query = """
                            INSERT INTO "product_template_attribute_value" ("id", "attribute_line_id", "color", 
                            "create_date", "create_uid", "price_extra", "product_attribute_value_id", 
                            "ptav_active", "write_date", "write_uid") 
                            VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
                    """
            size_value_params = ['product_template_attribute_value_id_seq', size_att_line_id[0]['id'], 10, datetime.datetime.now(), 2, '0.00', vals['size_value_id'], True, datetime.datetime.now(), 2]
            self.env.cr.execute(size_value_query, size_value_params)
            size_value_att_line_id = self.env.cr.dictfetchall()
            print("--------size_value_att_line_id------------", size_value_att_line_id)

            color_value_query = """
                                        INSERT INTO "product_template_attribute_value" ("id", "attribute_line_id", "color", 
                                        "create_date", "create_uid", "price_extra", "product_attribute_value_id", 
                                        "ptav_active", "write_date", "write_uid") 
                                        VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
                                """
            color_value_params = ['product_template_attribute_value_id_seq', color_att_line_id[0]['id'], 10,
                                 datetime.datetime.now(), 2, '0.00', vals['color_value_id'], True,
                                 datetime.datetime.now(), 2]
            self.env.cr.execute(color_value_query, color_value_params)
            color_value_att_line_id = self.env.cr.dictfetchall()
            # print("--------color_value_att_line_id------------", color_value_att_line_id)

            product_query = """
                        INSERT INTO "product_product" ("id", "active", "base_unit_count", "create_date", "create_uid", 
                        "product_tmpl_id", "write_date", "write_uid") 
                        VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s) RETURNING id
                    """
            product_params = ['product_product_id_seq', True, 0.0, datetime.datetime.now(), 2, tmpl_id[0]['id'], datetime.datetime.now(), 2]
            self.env.cr.execute(product_query, product_params)
            product_id = self.env.cr.dictfetchall()
            # print("--------product_id------------", product_id)

            mail_follow_query = """
                            INSERT INTO "mail_followers" ("id", "partner_id", "res_id", "res_model") VALUES (nextval(%s), %s, %s, %s) RETURNING id
                        """
            mail_follow_params = ['mail_followers_id_seq', 3, product_id[0]['id'], 'product.product']
            self.env.cr.execute(mail_follow_query, mail_follow_params)
            mail_follow_id = self.env.cr.dictfetchall()
            # print("--------mail_follow_id------------", mail_follow_id)

            ir_property_query = """
                            INSERT INTO "ir_property" ("id", "company_id", "create_date", "create_uid", "fields_id", 
                            "name", "res_id", "type", "value_reference", "write_date", "write_uid") 
                            VALUES (nextval(%s), %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
                        """
            ir_property_params = ['ir_property_id_seq', 1, datetime.datetime.now(), 2, 7967, 'responsible_id',
                                  'product.template,'+str(tmpl_id[0]['id']), 'many2one', 'res.users,2', datetime.datetime.now(), 2]
            self.env.cr.execute(ir_property_query, ir_property_params)
            return tmpl_id[0]['id']


    def product_search_sql_xmlrpc(self,name=False,code=False,size_value_id=False,color_value_id=False):
        if name and code and size_value_id and color_value_id:
            self.env.cr.execute("""
                SELECT
                    tmpl.id
                FROM
                    product_template as tmpl
                WHERE
                    tmpl.name = %s AND
                    tmpl.default_code = %s AND
                    tmpl.size_attribute_value_id = %s AND
                    tmpl.color_attribute_value_id = %s
                GROUP BY
                    tmpl.id
            """, (name,code,size_value_id,color_value_id))
            resp = self.env.cr.dictfetchall()
            if resp:
                return [resp[0].get("id")]
        return False


    def _create_variant_ids(self):
        self.flush()
        Product = self.env["product.product"]

        variants_to_create = []
        variants_to_activate = Product
        variants_to_unlink = Product

        for tmpl_id in self:
            lines_without_no_variants = tmpl_id.valid_product_template_attribute_line_ids._without_no_variant_attributes()

            all_variants = tmpl_id.with_context(active_test=False).product_variant_ids.sorted(lambda p: (p.active, -p.id))

            current_variants_to_create = []
            current_variants_to_activate = Product

            # adding an attribute with only one value should not recreate product
            # write this attribute on every product to make sure we don't lose them
            single_value_lines = lines_without_no_variants.filtered(lambda ptal: len(ptal.product_template_value_ids._only_active()) == 1)
            if single_value_lines:
                for variant in all_variants:
                    combination = variant.product_template_attribute_value_ids | single_value_lines.product_template_value_ids._only_active()
                    # Do not add single value if the resulting combination would
                    # be invalid anyway.
                    if (
                        len(combination) == len(lines_without_no_variants) and
                        combination.attribute_line_id == lines_without_no_variants
                    ):
                        variant.product_template_attribute_value_ids = combination

            # Set containing existing `product.template.attribute.value` combination
            existing_variants = {
                variant.product_template_attribute_value_ids: variant for variant in all_variants
            }

            # Determine which product variants need to be created based on the attribute
            # configuration. If any attribute is set to generate variants dynamically, skip the
            # process.
            # Technical note: if there is no attribute, a variant is still created because
            # 'not any([])' and 'set([]) not in set([])' are True.
            if not tmpl_id.has_dynamic_attributes():
                # Iterator containing all possible `product.template.attribute.value` combination
                # The iterator is used to avoid MemoryError in case of a huge number of combination.
                all_combinations = itertools.product(*[
                    ptal.product_template_value_ids._only_active() for ptal in lines_without_no_variants
                ])
                # For each possible variant, create if it doesn't exist yet.
                for combination_tuple in all_combinations:
                    combination = self.env['product.template.attribute.value'].concat(*combination_tuple)
                    is_combination_possible = tmpl_id._is_combination_possible_by_config(combination, ignore_no_variant=True)
                    if not is_combination_possible:
                        continue
                    if combination in existing_variants:
                        current_variants_to_activate += existing_variants[combination]
                    else:
                        current_variants_to_create.append(tmpl_id._prepare_variant_values(combination))
                        if len(current_variants_to_create) > 10000:
                            raise UserError(_(
                                'The number of variants to generate is too high. '
                                'You should either not generate variants for each combination or generate them on demand from the sales order. '
                                'To do so, open the form view of attributes and change the mode of *Create Variants*.'))
                variants_to_create += current_variants_to_create
                variants_to_activate += current_variants_to_activate

            else:
                for variant in existing_variants.values():
                    is_combination_possible = self._is_combination_possible_by_config(
                        combination=variant.product_template_attribute_value_ids,
                        ignore_no_variant=True,
                    )
                    if is_combination_possible:
                        current_variants_to_activate += variant
                variants_to_activate += current_variants_to_activate

            variants_to_unlink += all_variants - current_variants_to_activate

        if variants_to_activate:
            variants_to_activate.write({'active': True})
        if variants_to_create:
            Product.create(variants_to_create)
        if variants_to_unlink:
            variants_to_unlink._unlink_or_archive()
            # prevent change if exclusion deleted template by deleting last variant
            if self.exists() != self:
                raise UserError(_("This configuration of product attributes, values, and exclusions would lead to no possible variant. Please archive or delete your product directly if intended."))

        # prefetched o2m have to be reloaded (because of active_test)
        # (eg. product.template: product_variant_ids)
        # We can't rely on existing invalidate_cache because of the savepoint
        # in _unlink_or_archive.
        self.flush()
        self.invalidate_cache()
        return True